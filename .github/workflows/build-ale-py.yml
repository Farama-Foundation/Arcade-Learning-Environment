name: Build ale-py

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ale-py on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      name: Install Python ${{ matrix.python_version }}
      with:
        python-version: "3.7"
    - name: Install dependencies
      run: |
        python -m pip install cibuildwheel==1.5.5
    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2010"
        CIBW_BUILD: "cp3?-*"
        CIBW_SKIP: "*i686* *win32*"
        CIBW_TEST_REQUIRES: "pytest"
        CIBW_TEST_COMMAND: "pytest {project}"
        CIBW_ENVIRONMENT: "GITHUB_REF=${{ github.ref }}"
        CIBW_ENVIRONMENT_WINDOWS: "GITHUB_REF=${{ github.ref }} ALE_PY_CMAKE_ARGS=\"-DCMAKE_TOOLCHAIN_FILE='${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake' -DVCPKG_TARGET_TRIPLET='x64-windows-static'\""
        CIBW_BEFORE_BUILD_LINUX: "yum install -y zlib-devel"
        CIBW_BEFORE_BUILD_WINDOWS: "vcpkg install zlib:x64-windows-static"
    - uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: wheelhouse
  pypi:
    name: Deploy ale-py to PyPi test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: wheels
      - name: Append build identifier
        run: |
          find wheels -type f -exec sh -c "mv {} \$(echo {} | awk -F\"-\" '{OFS = FS; \$2 = \$2\".dev${{ github.run_number }}+${{ github.sha }}\"; print}')" \;
          ls wheels
      - name: Publish to PyPi test
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_test_token }}
          repository_url: https://test.pypi.org/legacy/
          packages_dir: wheels/
  release:
    name: Stage ale-py to Github releases
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: wheels
      - name: Create wheel archive
        run: |
          zip --junk-paths ale-py wheels/*
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: ${{ contains(github.ref, '-') }}
      - name: Upload artifacts to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ale-py.zip
          asset_name: ale-py.zip
          asset_content_type: application/zip
