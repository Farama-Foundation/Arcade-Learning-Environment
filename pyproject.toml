[build-system]
requires = [
    "setuptools>=61",
    "wheel",
    "cmake~=3.22",
    "ninja; sys_platform != 'win32' and platform_machine != 'arm64'",
]
build-backend = "setuptools.build_meta"

[project]
name = "ale-py"
description = "The Arcade Learning Environment (ALE) - a platform for AI research."
readme = "README.md"
requires-python = ">=3.7"
license = {text = "GPLv2"}
keywords = ["reinforcement-learning", "arcade-learning-environment", "atari"]
authors = [
  {name = "Marc G. Bellemare"},
  {name = "Yavar Naddaf"},
  {name = "Joel Veness"},
  {name = "Michael Bowling"},
]
maintainers = [
  {name = "Jesse Farebrother", email = "jfarebro@cs.mcgill.ca"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
  "numpy",
  "importlib-metadata>=4.10.0; python_version < '3.10'",
  "importlib-resources",
]
dynamic = ["version"]

[project.optional-dependencies]
test = [
  "pytest>=7.0",
  "gym~=0.23",
]

[project.urls]
homepage = "https://github.com/mgbellemare/Arcade-Learning-Environment"
documentation = "https://github.com/mgbellemare/Arcade-Learning-Environment/tree/master/docs"
changelog = "https://github.com/mgbellemare/Arcade-Learning-Environment/blob/master/CHANGELOG.md"

[project.scripts]
ale-import-roms = "ale_py.scripts.import_roms:main"

[project.entry-points."gym.envs"]
ALE = "ale_py.gym:register_gym_envs"
__internal__ = "ale_py.gym:register_legacy_gym_envs"

[tool.setuptools]
packages = [
  "ale_py",
  "ale_py.roms",
  "ale_py.scripts",
  "gym.envs.atari"
]
package-dir = {ale_py = "src/python", gym = "src/gym"}
package-data = {"ale_py" = ["py.typed"], "ale_py.roms" = ["*.bin", "md5.txt"]}

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --ignore vcpkg --ignore build"
testpaths = ["tests"]
norecursedirs = ["vcpkg", "build"]

[tool.cibuildwheel]
# Skip 32-bit wheels, PyPy & musllinux
skip = ["*-win32", "*i686", "pp*", "*-musllinux*"]

build-frontend = "build"

# Test configuration
test-extras = ["test"]
test-command = "pytest {project}"

# vcpkg manylinux images
manylinux-x86_64-image = "ghcr.io/jessefarebro/manylinux2014_x86_64-vcpkg"

[tool.cibuildwheel.linux]
environment-pass = ["GITHUB_REF"]

# macOS x86-64
[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
environment = { PIP_ONLY_BINARY = "numpy", VCPKG_DEFAULT_TRIPLET = "x64-osx-mixed", VCPKG_FEATURE_FLAGS = "-compilertracking", MACOSX_DEPLOYMENT_TARGET = "10.15" }

# macOS arm64
[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { PIP_ONLY_BINARY = "numpy", VCPKG_DEFAULT_TRIPLET = "arm64-osx-mixed", VCPKG_FEATURE_FLAGS = "-compilertracking", MACOSX_DEPLOYMENT_TARGET = "10.15" }

# Windows x64
[[tool.cibuildwheel.overrides]]
select = "*-win_amd64"
environment = { PIP_ONLY_BINARY = "numpy", VCPKG_DEFAULT_TRIPLET = "x64-windows", VCPKG_FEATURE_FLAGS = "-compilertracking" }

# Linux x86-64 (manylinux)
[[tool.cibuildwheel.overrides]]
select = "*-manylinux_x86_64"
environment = { PIP_ONLY_BINARY = "numpy", VCPKG_DEFAULT_TRIPLET = "x64-linux-mixed", VCPKG_FEATURE_FLAGS = "-compilertracking" }
